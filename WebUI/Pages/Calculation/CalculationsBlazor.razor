@page "/calculationsBlazor"
@page "/calculationsBlazor/{ShoeId:int}"
@using Domain
@using WebUI.Pages.Shared
@inject Application.Services.CalculationService calculationService
@inject Application.Services.MaterialService materialService
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

@* <style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }
</style>
<MudTable Elevation="5" T="Domain.Entities.Calculation" @ref="@_table" Items="@calculations" RowsPerPage="10" Hover="true" RowClass="cursor-pointer" RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
    LoadingProgressColor="Color.Info" Filter="new Func<Domain.Entities.Calculation, bool>(Search)" @bind-technology="calculation">

    <ToolBarContent>
        @if (visibleToAdmin)
        {
            <MudButton Style="margin-top:20px;" Variant="MudBlazor.Variant.Filled" @onclick="@(()=>AddCalculation())" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" IconSize="Size.Large">New</MudButton>
        }
        <MudSpacer />
        <MudText Typo="Typo.h6">Normativ Calculations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Calculations..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh hidden>Id</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Added</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id" hidden>@context.Id</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="DateAdded">@context.AddedOn.ToString("dd.MM.yyyy")</MudTd>
        <MudTd DataLabel="Delete">
            <MudFab @onclick="@(()=>OpenDialog(context.Id, ""))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
        </MudTd>
        <MudTd DataLabel="Modify">
            <MudTooltip Text="@TextChange()" Arrow="true" Placement="Placement.Left">
                <MudFab @onclick="@(()=>ModifyCalculation(context.Id))" Color="Color.Primary" StartIcon="@IconChange()" Size="Size.Small" IconSize="Size.Small"></MudFab>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
    </PagerContent>
</MudTable>

@if (selectedCalculationId != null)
{
    <h3>Calculation Items</h3>

    <MudTable Elevation="5" @ref="@_calculationItemsTable" Items="@selectedCalculationItems" RowsPerPage="10" Hover="true" LoadingProgressColor="Color.Info" EditContext="@editContext" EditRows="@editRows">
        <HeaderContent>
            <MudTh hidden>Id</MudTh>
            <MudTh>Id</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Color</MudTh>
            <MudTh>Material</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Normativ</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id" hidden>@context.Id</MudTd>
            <MudTd DataLabel="Type">
                <MudTextField @bind-Value="context.Type" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Description">
                <MudTextField @bind-Value="context.Description" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Color">
                <MudTextField @bind-Value="context.Color" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Material">
                <MudTextField @bind-Value="context.Material" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Price">
                <MudNumericField @bind-Value="context.Price" Variant="Variant.Outlined" />
            </MudTd>
            <MudTd DataLabel="Normativ">
                <MudTextField @bind-Value="context.Normativ" Variant="Variant.Outlined" />
            </MudTd>
        </RowTemplate>
    </MudTable>
}
@code
{
    private string searchString = "";
    private Domain.Entities.Calculation calculation = new();
    private IEnumerable<Domain.Entities.Calculation> calculations = new List<Domain.Entities.Calculation>();
    private MudTable<Domain.Entities.Calculation> _table;
    private MudTable<Domain.Entities.CalculationItem> _calculationItemsTable;
    private int? selectedCalculationId;
    private IEnumerable<Domain.Entities.CalculationItem> selectedCalculationItems = new List<Domain.Entities.CalculationItem>();
    private EditContext editContext;
    private List<Domain.Entities.CalculationItem> editRows = new List<Domain.Entities.CalculationItem>();
    private int selectedRowNumber = -1;
    private List<string> clickedEvents = new();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private bool visibleToAdmin { get; set; } = false;
    [Parameter]
    public int ShoeId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        visibleToAdmin = await CheckAuth();
        if (ShoeId != 0)
        {
            var materialList = await GetCalculations(ShoeId);
            calculations = materialList.ToList();
        }          
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }
    private async Task<bool> CheckAuth()
    {
        var authState = await authenticationState;
        var user = authState?.User;

        if (user?.Identity?.IsAuthenticated == true && user.IsInRole("Admin"))
        {
            return true;
        }

        return false;
    }

    private async Task ViewItems(int calcId)
    {
        selectedCalculationId = calcId;
        selectedCalculationItems = await calculationService.GetAllCalculationItemsForCalculation(calcId);
        editRows.Clear();
        editRows.AddRange(selectedCalculationItems);
        editContext = new EditContext(editRows);
        StateHasChanged();
    }

    private async Task OpenDialog(int id, string name)
    {
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var parameters = new DialogParameters { ["Data"] = $"{id.ToString()} - {name}" };
        var dialog = DialogService.Show<DeleteModal>("Confirm delete", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var response = await calculationService.Delete(id);

            snackBar.Add($"{nameof(Calculations)} deleted", Severity.Success);
        }


        await RefreshTable();
    }


    private async Task Save()
    {
        await calculationService.AddCalculation(calculation);
        calculation = new();
        snackBar.Add("Calculation saved", Severity.Success);

        await RefreshTable();
    }


    private async Task RefreshTable()
    {
        calculations = await GetCalculations(ShoeId);
        StateHasChanged(); // This line is needed to notify Blazor that the state has changed and it should re-render the component
    }


    private async Task<IEnumerable<Domain.Entities.Calculation>> GetCalculations(int id)
    {
        calculations = await calculationService.GetAllCalculations(id);
        foreach (var item in calculations)
        {
            // fetch all calculation items here
           // item.CalculationItems = await materialService.GetMaterialById(item.mat);
        }
        return calculations;
    }


    private bool Search(Domain.Entities.Calculation calculation)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }


        if (calculation.Id.ToString() == (searchString))
        {
            return true;
        }
        return false;
    }


    private async void Delete(int id)
    {
        await calculationService.Delete(id);
        snackBar.Add("Calculation deleted", Severity.Success);

        await RefreshTable();
    }

    private async void AddCalculation()
    {
        var options = new MudBlazor.DialogOptions
            {
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseOnEscapeKey = true
            };
        var dialog = DialogService.Show<AddCalculationDialog>("Add New Calculation", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await RefreshTable();
        }
    }


    private async void ModifyCalculation(int calcId)
    {

        var options = new MudBlazor.DialogOptions
            {
                Position = MudBlazor.DialogPosition.Center,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseOnEscapeKey = true
            };

        var selectedShoe = calculations.FirstOrDefault(s => s.Id == calcId);

        if (selectedShoe == null)
            return;
        var parameters = new DialogParameters<UpdateCalculationDialog>
        {
            { "CalculationId", calcId },
            { "visibleToAdmin", visibleToAdmin }

        };
        var dialog = DialogService.Show<UpdateCalculationDialog>(visibleToAdmin ? "Modify" : "View details", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await RefreshTable();
        }
    }

    private void HandleError(string errorMessage)
    {
        snackBar.Add(errorMessage, Severity.Error);
    }
    private string IconChange()
    {
        string icon = string.Empty;
        if (visibleToAdmin)
        {
            icon = @Icons.Material.Filled.Edit;
        }
        else
        {
            icon = @Icons.Material.Filled.FileOpen;
        }

        return icon;
    }

    private string TextChange()
    {
        var text = "";

        if (visibleToAdmin)
        {
            text = "Update";
        }
        else
        {
            text = "View";
        }

        return text;
    }

    private void RowClickEvent(TableRowClickEventArgs<Domain.Entities.Calculation> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row has been clicked");
    }

    private string SelectedRowClassFunc(Domain.Entities.Calculation element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (_table.SelectedItem != null && _table.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
} *@
