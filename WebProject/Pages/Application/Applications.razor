@page "/applications"

@using Domain
@inject Application.Services.ApplicationService applicationService
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Applications</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="application.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal" Required="true" RequiredError="Name is required!"></MudTextField>
        <MudSpacer />

        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save" Disabled="string.IsNullOrWhiteSpace(application.Name)">Save</MudButton>
    </MudCardContent>
</MudCard>
<br />
@* <MudButton @onclick="@(()=>OpenDialog(context.Id))" Variant="Variant.Filled" Color="Color.Primary">
    Open Simple Dialog
</MudButton> *@
<MudTable Elevation="5" @ref="@_table" Items="@applications" RowsPerPage="10" Hover="true" LoadingProgressColor="Color.Info" Filter="new Func<Domain.Entities.Application, bool>(Search)" @bind-technology="application">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Applications</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for applications..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh hidden>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Added</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id" hidden>@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="DateAdded">@context.AddedOn.ToString("dd.MM.yyyy")</MudTd>
        <MudTd DataLabel="">
                <MudFab @onclick="@(()=>OpenDialog(context.Id))" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>

        </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
        </PagerContent>
</MudTable>



@code 
    {
    private string searchString = "";
    private Domain.Entities.Application application = new();
    private IEnumerable<Domain.Entities.Application> tops = new List<Domain.Entities.Application>();
    private MudTable<Domain.Entities.Application> _table;



    private async Task OpenDialog(int id)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
        var dialog = DialogService.Show<DeleteApplicationModal>("Delete", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var response = await applicationService.DeleteApplication(id);
            snackBar.Add("Application deleted", Severity.Success);
        }

        await RefreshTable();


    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    protected override async Task OnInitializedAsync()
    {
        var applicationList = await GetApplications();
        applications = applicationList.ToList();
    }

    private async Task Save()
    {
        await applicationService.AddApplication(application);
        application = new();
        snackBar.Add("Application saved", Severity.Success);

        await RefreshTable();
    }

    private async Task RefreshTable()
    {
        applications = await GetApplications();
        StateHasChanged(); // This line is needed to notify Blazor that the state has changed and it should re-render the component
    }

    private async Task<IEnumerable<Domain.Entities.Application>> GetApplications()
    {
        return await applicationService.GetAllApplications();
    }

    private bool Search(Domain.Entities.Application application)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (top.Name.Contains(searchString))
        {
            return true;
        }
        return false;
    }

    private async void Delete(int id)
    {
        await applicationService.DeleteApplication(id);
        snackBar.Add("Application deleted", Severity.Success);

        await RefreshTable();
    }
}
