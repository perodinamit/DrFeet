@using Domain.Entities
@using Domain.ViewModels

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject Application.Services.ShoeService shoeService
@inject Application.Services.ImageService imageService

<MudDialog>
    <DialogContent>
        @if (modifiedShoe?.ImageData is not null)
        {
            <MudImage Src="@ImageData" @bind-Value="modifiedShoe.ImageData" Height=200 Width=300 Elevation="25" Class="rounded-lg" />            
        }
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudFab HtmlTag="label"
                        Color="Color.Secondary"
                        StartIcon="@Icons.Material.Filled.Image"
                        Label="Load picture"
                        for="@context.Id" />
            </ButtonTemplate>
        </MudFileUpload>

        <!-- Add your form controls for modifying the shoe here -->
        <MudTextField @bind-Value="modifiedShoe.Code" Required="true" RequiredError="Code is required!" Label="Code" />
        <MudTextField @bind-Value="modifiedShoe.Name" RequiredError="Name is required!" Label="Name" />
        <MudTextField @bind-Value="modifiedShoe.Description" Label="Description" />

        <MudSelect @bind-Value="modifiedShoe.Top.Name" Label="Top" Items="@tops" />
        <MudSelect @bind-Value="modifiedShoe.Lining.Name" Label="Lining" Items="@linings" />
        <MudSelect @bind-Value="modifiedShoe.Sole.Name" Label="Sole" Items="@soles" />
        <MudSelect @bind-Value="modifiedShoe.Purpose.Name" Label="Purpose" Items="@purposes" />
        <MudSelect @bind-Value="modifiedShoe.ColorType.Name" Label="Color Type" Items="@colorTypes" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save Changes</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public int ShoeId { get; set; }
    private Shoe? modifiedShoe;
    private IEnumerable<SelectItem> tops; 
    private IEnumerable<SelectItem> linings;
    private IEnumerable<SelectItem> soles;
    private IEnumerable<SelectItem> purposes;
    private IEnumerable<SelectItem> colorTypes;
    private string? ImageData;
    MudDialog form;

    protected override async Task OnInitializedAsync()
    {
        modifiedShoe = await shoeService.FindShoe(ShoeId);
        if (modifiedShoe?.ImageData is not null)
        {
            ImageData = "data:image/png;base64, " + Convert.ToBase64String(modifiedShoe.ImageData);          
        }


        // Populate dropdown options
        tops = await shoeService.GetDropdownOptions<Domain.Entities.Top>("tops");
        linings = await shoeService.GetDropdownOptions<Domain.Entities.Lining>("linings");
        soles = await shoeService.GetDropdownOptions<Domain.Entities.Sole>("soles");
        purposes = await shoeService.GetDropdownOptions<Domain.Entities.Purpose>("purposes");
        colorTypes = await shoeService.GetDropdownOptions<Domain.Entities.ColorType>("colortypes");
    }


    private async Task UploadFiles(IBrowserFile file)
    {
        var fileContent = await imageService.UploadImage(file);

        ImageData = "data:image/png;base64, " + Convert.ToBase64String(fileContent);

        modifiedShoe.ImageData = fileContent;
    }



    async void Submit()
    {
        bool success = await shoeService.ModifyShoe(modifiedShoe);  
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();
}